"use strict";

window.onbeforeunload = function () {
  window.scrollTo(0, 0);
};
"use strict";
"use strict";

var scrollChange = 1;
$(window).scroll(function () {
  var scroll = $(window).scrollTop();

  if (scroll >= scrollChange) {
    $('.header').addClass('js-scroll-down');
    $('.header').removeClass('js-scroll-top');
  } else {
    $('.header').removeClass('js-scroll-down').removeClass('js-nav-open').removeClass('js-nav-close');
    $('.header').addClass('js-scroll-top');
  }
}); // Media 992 =====>

if (window.matchMedia("(min-width: 992px)").matches) {
  $('.burger').click(function () {
    if ($('.header').hasClass('js-nav-open')) {
      $('.header').removeClass('js-nav-open');
      $('.header').addClass('js-nav-close');
    } else {
      $('.header').addClass('js-nav-open');
      $('.header').removeClass('js-nav-close');
    }
  });
} else {
  $('.burger').click(function () {
    $('.header').toggleClass('js-nav-open');
    $('body').toggleClass('js-lock');
  });
}
"use strict";

// Auto size textarea =====>
var textarea = document.querySelector('textarea');
textarea.addEventListener('keydown', autosizeTextarea);

function autosizeTextarea() {
  var el = this;
  setTimeout(function () {
    el.style.cssText = 'height:auto; padding:0';
    el.style.cssText = '-moz-box-sizing:content-box';
    el.style.cssText = 'height:' + el.scrollHeight + 'px';
  }, 0);
} // Custom select =====>


$('select').each(function () {
  var $this = $(this),
      numberOfOptions = $(this).children('option').length;
  $this.addClass('select__hidden');
  $this.wrap('<div class="select"></div>');
  $this.after('<div class="select__styled"></div>');
  var $styledSelect = $this.next('div.select__styled');
  $styledSelect.text($this.children('option').eq(0).text());
  $styledSelect.append('<i class="icon-arrow-dropdown"></i>');
  var $list = $('<ul />', {
    'class': 'select__options'
  }).insertAfter($styledSelect);

  for (var i = 0; i < numberOfOptions; i++) {
    $('<li />', {
      text: $this.children('option').eq(i).text(),
      rel: $this.children('option').eq(i).val()
    }).appendTo($list);
  }

  var $listItems = $list.children('li');
  $styledSelect.click(function (e) {
    e.stopPropagation();
    $('div.select__styled.active').not(this).each(function () {
      $(this).removeClass('active').next('ul.select__options').slideUp(300);
    });
    $(this).toggleClass('active').next('ul.select__options').slideToggle(300);
  });
  $listItems.click(function (e) {
    e.stopPropagation();
    $styledSelect.text($(this).text()).removeClass('active');
    $this.val($(this).attr('rel'));
    $list.slideUp(300);
  });
  $(document).click(function () {
    $styledSelect.removeClass('active');
    $list.slideUp(300);
  });
});
"use strict";
"use strict";

$('.show__trigger').click(function () {
  $(this).parent().find('.show__item').toggle();
  $(this).toggleClass('js-active');

  if ($(this).hasClass('js-active')) {
    $(this).find('span').text('See less');
  } else {
    $(this).find('span').text('See all');
  }
});
"use strict";
"use strict";
"use strict";

var sliderPractices = new Swiper('.practices-slider', {
  slidesPerView: 1,
  spaceBetween: 40,
  navigation: {
    nextEl: ".practices-button-next",
    prevEl: ".practices-button-prev"
  },
  pagination: {
    el: ".practices-pagination"
  },
  breakpoints: {
    768: {
      slidesPerView: 2
    }
  }
});
"use strict";

// Media 992 =====>
if (window.matchMedia("(min-width: 992px)").matches) {
  $('.technology-card').click(function () {
    $(".technology-card").not($(this).closest(".technology-card")).removeClass("js-active");
    $(this).closest(".technology-card").addClass("js-active");

    if ($(this).hasClass('js-active')) {
      $('.technology-card__body').not($(this).find('.technology-card__body')).slideUp(300);
      $(this).find('.technology-card__body').slideDown(300);
    }
  });
} else {
  $('.technology-card').removeClass('js-active');
  $('.technology-card').click(function () {
    $(this).toggleClass('js-active');
    $('.technology-card').not($(this)).removeClass('js-active');
  });
}
"use strict";

var sliderTestimonials = new Swiper('.testimonials-slider', {
  slidesPerView: 1,
  spaceBetween: 30,
  loop: true,
  navigation: {
    nextEl: ".testimonials-button-next",
    prevEl: ".testimonials-button-prev"
  },
  pagination: {
    el: ".testimonials-pagination"
  },
  breakpoints: {
    768: {
      slidesPerView: 2
    },
    992: {
      slidesPerView: 'auto',
      centeredSlides: true
    }
  }
});
"use strict";

// Media 992 =====>
if (window.matchMedia("(min-width: 992px)").matches) {
  window.homepagecheck = function () {
    var check = false;

    if (document.location.pathname === "/" || document.location.pathname === "/index.html") {
      check = true;
    }

    return check;
  };

  if (window.homepagecheck()) {
    // Horizontal scroll in Treatments =====>
    gsap.registerPlugin(ScrollTrigger);
    var sections = gsap.utils.toArray(".treatments-wrapper");
    var maxWidth = 0;

    var getMaxWidth = function getMaxWidth() {
      maxWidth = 0;
      sections.forEach(function (section) {
        maxWidth += section.offsetWidth;
      });
    };

    getMaxWidth();
    ScrollTrigger.addEventListener("refreshInit", getMaxWidth);
    var triggerItem = document.querySelector('.treatments');
    gsap.to(sections, {
      x: function x() {
        return "-".concat(maxWidth - window.innerWidth);
      },
      ease: "none",
      scrollTrigger: {
        start: "-120px top",
        trigger: triggerItem,
        pin: true,
        scrub: true,
        end: function end() {
          return "+=".concat(maxWidth);
        },
        invalidateOnRefresh: true
      }
    });
    sections.forEach(function (sct, i) {
      ScrollTrigger.create({
        trigger: sct,
        start: function start() {
          return 'top top-=' + (sct.offsetLeft - window.innerWidth / 2) * (maxWidth / (maxWidth - window.innerWidth));
        },
        end: function end() {
          return '+=' + sct.offsetWidth * (maxWidth / (maxWidth - window.innerWidth));
        },
        toggleClass: {
          targets: sct,
          className: "active"
        }
      });
    });
  } else {
    null;
  }
} else {
  var sliderTreatments = new Swiper('.treatments-slider', {
    slidesPerView: 1,
    spaceBetween: 30,
    navigation: {
      nextEl: ".treatments-button-next",
      prevEl: ".treatments-button-prev"
    },
    pagination: {
      el: ".treatments-pagination"
    },
    breakpoints: {
      768: {
        slidesPerView: 2
      }
    }
  });
}
"use strict";
"use strict";

var sliderCases = new Swiper('.cases-slider', {
  slidesPerView: 1,
  spaceBetween: 30,
  navigation: {
    nextEl: ".cases-button-next",
    prevEl: ".cases-button-prev"
  },
  pagination: {
    el: ".cases-pagination"
  },
  breakpoints: {
    768: {
      slidesPerView: 2
    }
  }
});
"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// Custom scrollbar in tooth table =====>
document.addEventListener("DOMContentLoaded", function () {
  OverlayScrollbars(document.querySelectorAll(".tooth"), {});
}); // Input Files =====>

var dt = new DataTransfer();
$(".files-trigger__input").on('change', function (e) {
  for (var i = 0; i < this.files.length; i++) {
    var filesWrapper = $('<div/>', {
      class: 'files__wrapper'
    });
    var filesItem = $('<div/>', {
      class: 'files-item'
    }),
        fileName = $('<span/>', {
      class: 'files-item__name',
      text: this.files.item(i).name
    });
    filesItem.append('<i class="icon-file"></i>').append(fileName).append('<i class="files-item__remove icon-trash-can"></i>');
    filesWrapper.append(filesItem);
    $(".files__table").append(filesWrapper).css('display', 'flex');
    $('.files').css('margin-bottom', '48px');
  }

  ;

  var _iterator = _createForOfIteratorHelper(this.files),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var file = _step.value;
      dt.items.add(file);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  this.files = dt.files;
  $('.files-item__remove').click(function () {
    var name = $(this).next('.files-item__name').text();
    $(this).parents('.files__wrapper').remove();

    for (var _i = 0; _i < dt.items.length; _i++) {
      if (name === dt.items[_i].getAsFile().name) {
        dt.items.remove(_i);
        continue;
      }
    }

    document.getElementsByClassName('files-trigger__input').files = dt.files;
  });
});
"use strict";
"use strict";
"use strict";

var sliderSocials = new Swiper('.socials__slider', {
  slidesPerView: 1,
  spaceBetween: 30,
  navigation: {
    nextEl: ".socials-button-next",
    prevEl: ".socials-button-prev"
  },
  pagination: {
    el: ".socials-pagination"
  },
  breakpoints: {
    768: {
      slidesPerView: 2
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,